#!/usr/bin/env python3
"""
EJECUTOR AUTOM√ÅTICO DE INFORME EDA COMPLETO
==========================================

Este script ejecuta autom√°ticamente:
1. El an√°lisis EDA completo con correcciones
2. Genera el informe en formato Markdown
3. Convierte a formato DOCX
4. Muestra resumen de archivos generados

Uso: python ejecutar_todo.py
"""

import subprocess
import sys
import os
import time

def print_banner():
    """Mostrar banner del programa"""
    print("=" * 80)
    print("üß† EJECUTOR AUTOM√ÅTICO DE INFORME EDA - CORHUILA")
    print("=" * 80)
    print("üìä An√°lisis Exploratorio de Datos Educativos")
    print("üìù Generaci√≥n autom√°tica de informes MD y DOCX")
    print("=" * 80)
    print()

def check_dependencies():
    """Verificar e instalar dependencias necesarias"""
    print("üîç Verificando dependencias...")
    
    required_packages = [
        'pandas', 'numpy', 'matplotlib', 'seaborn', 
        'scipy', 'python-docx', 'openpyxl'
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package.replace('-', '_'))
            print(f"   ‚úÖ {package}")
        except ImportError:
            missing_packages.append(package)
            print(f"   ‚ùå {package} - FALTANTE")
    
    if missing_packages:
        print(f"\n‚ö†Ô∏è  Instalando paquetes faltantes: {', '.join(missing_packages)}")
        for package in missing_packages:
            subprocess.run([sys.executable, '-m', 'pip', 'install', package], 
                         capture_output=True)
        print("‚úÖ Dependencias instaladas")
    
    print("‚úÖ Todas las dependencias est√°n disponibles\n")

def execute_eda_analysis():
    """Ejecutar el an√°lisis EDA completo con correcciones"""
    print("üöÄ Ejecutando an√°lisis EDA completo...")
    
    try:
        # Librer√≠as para an√°lisis y visualizaci√≥n
        import numpy as np
        import pandas as pd
        import matplotlib.pyplot as plt
        import seaborn as sns
        from scipy import stats
        from scipy.stats import pearsonr
        import warnings
        warnings.filterwarnings('ignore')

        # Colores institucionales CORHUILA
        COLORES_CORHUILA = {
            "verde": "#009739",
            "azul": "#005B7F", 
            "gris_claro": "#F0F0F0",
            "blanco": "#FFFFFF"
        }

        # Configuraci√≥n de estilo general
        plt.style.use('default')
        sns.set_palette([COLORES_CORHUILA['verde'], COLORES_CORHUILA['azul']])
        plt.rcParams.update({
            'font.family': 'Arial',
            'font.size': 10,
            'figure.figsize': (10, 6),
            'axes.titlesize': 12,
            'axes.titleweight': 'bold'
        })

        def guardar_imagen(nombre_archivo, bloque):
            prefijos = {1: "1_", 2: "2_", 3: "3_", 4: "4_"}
            if not os.path.exists('output_images'):
                os.makedirs('output_images')
            nombre_completo = f"output_images/{prefijos[bloque]}{nombre_archivo}.png"
            plt.savefig(nombre_completo, dpi=300, bbox_inches='tight', 
                        facecolor='white', edgecolor='none')
            print(f"Imagen guardada: {nombre_completo}")

        ruta = "./Dataset/dataset_EDA_posgrado_completo.xlsx"
        df = pd.read_excel(ruta)

        print("Dataset cargado exitosamente")
        print(f"Dimensiones: {df.shape[0]} estudiantes x {df.shape[1]} variables")

        # 1. ESTAD√çSTICOS DESCRIPTIVOS
        variables_principales = ['Promedio_Academico', 'Motivaci√≥n_Estudio', 'Horas_Estudio_Semanal', 'Autoestima_Acad√©mica']

        print("\n" + "="*60)
        print("BLOQUE 1: ESTAD√çSTICOS DESCRIPTIVOS")
        print("="*60)

        for var in variables_principales:
            if var in df.columns:
                print(f"\n{var}:")
                print(f"   Media: {df[var].mean():.2f}")
                print(f"   Mediana: {df[var].median():.2f}")
                print(f"   Desv. Est√°ndar: {df[var].std():.2f}")
                print(f"   M√≠nimo: {df[var].min():.2f}")
                print(f"   M√°ximo: {df[var].max():.2f}")

        # Gr√°fico de estad√≠sticos
        plt.figure(figsize=(12, 8))
        medias = [df[var].mean() for var in variables_principales if var in df.columns]
        variables_nombres = [var.replace('_', ' ') for var in variables_principales if var in df.columns]

        bars = plt.bar(variables_nombres, medias, color=[COLORES_CORHUILA['azul'], COLORES_CORHUILA['verde'], 
                                                         COLORES_CORHUILA['azul'], COLORES_CORHUILA['verde']], alpha=0.8)

        plt.title('Bloque 1: Estad√≠sticos - Medias de Variables Principales', 
                  fontsize=14, fontweight='bold', color=COLORES_CORHUILA['azul'], pad=20)
        plt.xlabel('Variables de Estudio', fontsize=12)
        plt.ylabel('Valor Promedio', fontsize=12)
        plt.xticks(rotation=45, ha='right')
        plt.grid(axis='y', alpha=0.3)

        for bar, media in zip(bars, medias):
            plt.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.1, 
                     f'{media:.2f}', ha='center', va='bottom', fontweight='bold')

        plt.tight_layout()
        guardar_imagen("estadisticos_generales", 1)
        plt.close()

        # Detecci√≥n de outliers
        print("\nDetecci√≥n de valores at√≠picos:")
        outliers_data = []
        for var in variables_principales:
            if var in df.columns:
                Q1 = df[var].quantile(0.25)
                Q3 = df[var].quantile(0.75)
                IQR = Q3 - Q1
                outliers = df[(df[var] < (Q1 - 1.5 * IQR)) | (df[var] > (Q3 + 1.5 * IQR))][var]
                outliers_data.append(len(outliers))
                print(f"   {var}: {len(outliers)} valores at√≠picos detectados")

        plt.figure(figsize=(10, 6))
        bars = plt.bar(variables_nombres, outliers_data, 
                      color=COLORES_CORHUILA['verde'], alpha=0.7, edgecolor='white', linewidth=2)

        plt.title('Bloque 1: Detecci√≥n de Valores At√≠picos por Variable', 
                  fontsize=14, fontweight='bold', color=COLORES_CORHUILA['azul'], pad=20)
        plt.xlabel('Variables de Estudio', fontsize=12)
        plt.ylabel('Cantidad de Outliers', fontsize=12)
        plt.xticks(rotation=45, ha='right')
        plt.grid(axis='y', alpha=0.3)

        for bar, count in zip(bars, outliers_data):
            if count > 0:
                plt.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.1, 
                         str(count), ha='center', va='bottom', fontweight='bold')

        plt.tight_layout()
        guardar_imagen("outliers_detectados", 1)
        plt.close()

        # 2. VISUALIZACIONES
        print("\n" + "="*60)
        print("BLOQUE 2: VISUALIZACIONES")
        print("="*60)

        # Histograma - Promedio Acad√©mico
        plt.figure(figsize=(10, 6))
        plt.hist(df['Promedio_Academico'], bins=20, color=COLORES_CORHUILA['azul'], alpha=0.7, edgecolor='white')
        plt.title('Bloque 2 - Gr√°fico 1: Histograma - Promedio Acad√©mico', fontweight='bold', color=COLORES_CORHUILA['azul'])
        plt.xlabel('Promedio Acad√©mico')
        plt.ylabel('Frecuencia')
        plt.grid(axis='y', alpha=0.3)
        plt.tight_layout()
        guardar_imagen("histograma_promedio", 2)
        plt.close()

        # Histograma - Horas de Estudio
        plt.figure(figsize=(10, 6))
        plt.hist(df['Horas_Estudio_Semanal'], bins=15, color=COLORES_CORHUILA['verde'], alpha=0.7, edgecolor='white')
        plt.title('Bloque 2 - Gr√°fico 2: Histograma - Horas de Estudio Semanal', fontweight='bold', color=COLORES_CORHUILA['azul'])
        plt.xlabel('Horas de Estudio Semanal')
        plt.ylabel('Frecuencia')
        plt.grid(axis='y', alpha=0.3)
        plt.tight_layout()
        guardar_imagen("histograma_horas_estudio", 2)
        plt.close()

        # Box Plot - Motivaci√≥n
        plt.figure(figsize=(10, 4))
        plt.boxplot(df['Motivaci√≥n_Estudio'], vert=False, patch_artist=True, 
                   boxprops=dict(facecolor=COLORES_CORHUILA['azul'], alpha=0.7))
        plt.title('Bloque 2 - Gr√°fico 3: Box Plot - Motivaci√≥n para Estudiar', fontweight='bold', color=COLORES_CORHUILA['azul'])
        plt.xlabel('Motivaci√≥n para Estudiar')
        plt.grid(axis='x', alpha=0.3)
        plt.tight_layout()
        guardar_imagen("boxplot_motivacion", 2)
        plt.close()

        # Box Plot - Autoestima
        plt.figure(figsize=(10, 4))
        plt.boxplot(df['Autoestima_Acad√©mica'], vert=False, patch_artist=True,
                   boxprops=dict(facecolor=COLORES_CORHUILA['verde'], alpha=0.7))
        plt.title('Bloque 2 - Gr√°fico 4: Box Plot - Autoestima Acad√©mica', fontweight='bold', color=COLORES_CORHUILA['azul'])
        plt.xlabel('Autoestima Acad√©mica')
        plt.grid(axis='x', alpha=0.3)
        plt.tight_layout()
        guardar_imagen("boxplot_autoestima", 2)
        plt.close()

        # Gr√°fico de Barras - G√©nero
        plt.figure(figsize=(10, 6))
        counts = df['G√©nero'].value_counts()
        bars = plt.bar(counts.index, counts.values, color=[COLORES_CORHUILA['azul'], COLORES_CORHUILA['verde'], COLORES_CORHUILA['gris_claro']])
        plt.title('Bloque 2 - Gr√°fico 5: Gr√°fico de Barras - Distribuci√≥n por G√©nero', fontweight='bold', color=COLORES_CORHUILA['azul'])
        plt.xlabel('G√©nero')
        plt.ylabel('Cantidad de Estudiantes')
        plt.grid(axis='y', alpha=0.3)

        for bar, valor in zip(bars, counts.values):
            plt.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 1, 
                     str(valor), ha='center', va='bottom', fontweight='bold')

        plt.tight_layout()
        guardar_imagen("barras_genero", 2)
        plt.close()

        # Gr√°fico de Anillo - Estilos de Aprendizaje
        plt.figure(figsize=(8, 8))
        sizes = df['Estilo_Aprendizaje'].value_counts()
        colors = [COLORES_CORHUILA['verde'], COLORES_CORHUILA['azul'], COLORES_CORHUILA['gris_claro'], '#FFD700']
        wedges, texts, autotexts = plt.pie(sizes, labels=sizes.index, autopct='%1.1f%%', startangle=90, 
                                          colors=colors[:len(sizes)], wedgeprops=dict(width=0.4))
        plt.title('Bloque 2 - Gr√°fico 6: Gr√°fico de Anillo - Estilos de Aprendizaje', 
                  fontweight='bold', color=COLORES_CORHUILA['azul'], pad=20)
        plt.axis('equal')
        plt.tight_layout()
        guardar_imagen("donut_estilos_aprendizaje", 2)
        plt.close()

        # 3. AN√ÅLISIS DE NORMALIDAD
        print("\n" + "="*60)
        print("BLOQUE 3: AN√ÅLISIS DE NORMALIDAD")
        print("="*60)

        datos_normalidad = []
        for i, var in enumerate(variables_principales, 1):
            print(f"\nVariable {i}: {var}")
            print("-" * 50)
            
            stat, p_value = stats.shapiro(df[var].dropna())
            print(f"Prueba Shapiro-Wilk:")
            print(f"   Estad√≠stico: {stat:.4f}")
            print(f"   P-valor: {p_value:.4f}")
            
            if p_value > 0.05:
                print("   Distribuci√≥n normal (no se rechaza H0)")
                normalidad = "Normal"
            else:
                print("   Distribuci√≥n no normal (se rechaza H0)")
                normalidad = "No Normal"
            
            sesgo = df[var].skew()
            curtosis = df[var].kurtosis()
            
            print(f"An√°lisis de forma:")
            print(f"   Sesgo (Skewness): {sesgo:.3f}")
            print(f"   Curtosis: {curtosis:.3f}")
            
            datos_normalidad.append({
                'variable': var.replace('_', ' '),
                'p_value': p_value,
                'normalidad': normalidad,
                'sesgo': sesgo,
                'curtosis': curtosis
            })

        # Gr√°fico de normalidad
        plt.figure(figsize=(12, 8))
        variables_nombres = [d['variable'] for d in datos_normalidad]
        p_values = [d['p_value'] for d in datos_normalidad]
        colores = [COLORES_CORHUILA['verde'] if p > 0.05 else COLORES_CORHUILA['azul'] for p in p_values]

        bars = plt.bar(variables_nombres, p_values, color=colores, alpha=0.8, edgecolor='white', linewidth=2)
        plt.axhline(y=0.05, color='red', linestyle='--', linewidth=2, label='Nivel de significancia (Œ±=0.05)')

        plt.title('Bloque 3: An√°lisis de Normalidad - Test Shapiro-Wilk', 
                  fontsize=14, fontweight='bold', color=COLORES_CORHUILA['azul'], pad=20)
        plt.xlabel('Variables de Estudio', fontsize=12)
        plt.ylabel('P-valor', fontsize=12)
        plt.xticks(rotation=45, ha='right')
        plt.grid(axis='y', alpha=0.3)
        plt.legend()

        for bar, p_val in zip(bars, p_values):
            plt.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.002, 
                     f'{p_val:.3f}', ha='center', va='bottom', fontweight='bold', fontsize=10)

        plt.tight_layout()
        guardar_imagen("normalidad_test", 3)
        plt.close()

        # Gr√°fico de sesgo y curtosis
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))

        sesgos = [d['sesgo'] for d in datos_normalidad]
        bars1 = ax1.bar(variables_nombres, sesgos, color=COLORES_CORHUILA['azul'], alpha=0.7)
        ax1.set_title('Bloque 3: An√°lisis de Sesgo (Skewness)', fontweight='bold', color=COLORES_CORHUILA['azul'])
        ax1.set_xlabel('Variables')
        ax1.set_ylabel('Valor de Sesgo')
        ax1.tick_params(axis='x', rotation=45)
        ax1.grid(axis='y', alpha=0.3)
        ax1.axhline(y=0, color='black', linestyle='-', alpha=0.5)

        for bar, sesgo in zip(bars1, sesgos):
            ax1.text(bar.get_x() + bar.get_width()/2, bar.get_height() + (0.02 if sesgo >= 0 else -0.05), 
                     f'{sesgo:.2f}', ha='center', va='bottom' if sesgo >= 0 else 'top', fontweight='bold')

        curtosis_values = [d['curtosis'] for d in datos_normalidad]
        bars2 = ax2.bar(variables_nombres, curtosis_values, color=COLORES_CORHUILA['verde'], alpha=0.7)
        ax2.set_title('Bloque 3: An√°lisis de Curtosis', fontweight='bold', color=COLORES_CORHUILA['azul'])
        ax2.set_xlabel('Variables')
        ax2.set_ylabel('Valor de Curtosis')
        ax2.tick_params(axis='x', rotation=45)
        ax2.grid(axis='y', alpha=0.3) 
        ax2.axhline(y=0, color='black', linestyle='-', alpha=0.5)

        for bar, curt in zip(bars2, curtosis_values):
            ax2.text(bar.get_x() + bar.get_width()/2, bar.get_height() + (0.02 if curt >= 0 else -0.05), 
                     f'{curt:.2f}', ha='center', va='bottom' if curt >= 0 else 'top', fontweight='bold')

        plt.tight_layout()
        guardar_imagen("sesgo_curtosis", 3)
        plt.close()

        # 4. AN√ÅLISIS BIVARIADO
        print("\n" + "="*60)
        print("BLOQUE 4: AN√ÅLISIS BIVARIADO")
        print("="*60)

        # Mapeos corregidos para variables categ√≥ricas
        participacion_map = {
            'Nunca': 1, 'Poco': 2, 'Frecuente': 4, 'Siempre': 5
        }

        acceso_map = {
            'Deficiente': 2, 'Regular': 3, 'Bueno': 4, 'Excelente': 5
        }

        # Aplicar mapeos
        if 'Participaci√≥n_Clases' in df.columns:
            df['Participaci√≥n_Clases_Num'] = df['Participaci√≥n_Clases'].map(participacion_map)
            df['Participaci√≥n_Clases_Num'] = df['Participaci√≥n_Clases_Num'].fillna(3)

        if 'Acceso_Recursos_Acad√©micos' in df.columns:  
            df['Acceso_Recursos_Acad√©micos_Num'] = df['Acceso_Recursos_Acad√©micos'].map(acceso_map)
            df['Acceso_Recursos_Acad√©micos_Num'] = df['Acceso_Recursos_Acad√©micos_Num'].fillna(3)

        # Relaci√≥n 1: Horas de Estudio vs. Promedio Acad√©mico
        print("\nRelaci√≥n 1: Horas de Estudio vs. Promedio Acad√©mico")
        print("-" * 60)

        corr_1 = df['Horas_Estudio_Semanal'].corr(df['Promedio_Academico'])
        corr_coef_1, p_value_1 = pearsonr(df['Horas_Estudio_Semanal'], df['Promedio_Academico'])
        print(f"Correlaci√≥n de Pearson: {corr_1:.4f}")
        print(f"P-valor: {p_value_1:.4f}")
        significancia_1 = "significativa" if p_value_1 < 0.05 else "no significativa"
        print(f"La correlaci√≥n es {significancia_1}")

        plt.figure(figsize=(10, 6))
        plt.scatter(df['Horas_Estudio_Semanal'], df['Promedio_Academico'], 
                   alpha=0.6, color=COLORES_CORHUILA['azul'], s=50)
        z = np.polyfit(df['Horas_Estudio_Semanal'], df['Promedio_Academico'], 1)
        p = np.poly1d(z)
        plt.plot(df['Horas_Estudio_Semanal'], p(df['Horas_Estudio_Semanal']), 
                 color=COLORES_CORHUILA['verde'], linewidth=3)
        plt.title('Bloque 4: Relaci√≥n - Horas de Estudio vs. Promedio Acad√©mico', 
                  fontweight='bold', color=COLORES_CORHUILA['azul'], pad=15)
        plt.xlabel('Horas de Estudio Semanal')
        plt.ylabel('Promedio Acad√©mico')
        plt.grid(alpha=0.3)
        plt.text(0.05, 0.95, f'r = {corr_1:.3f}\np = {p_value_1:.3f}', 
                 transform=plt.gca().transAxes, fontsize=12, 
                 bbox=dict(boxstyle="round,pad=0.3", facecolor="white", alpha=0.8))
        plt.tight_layout()
        guardar_imagen("dispersion_estudio_vs_promedio", 4)
        plt.close()

        # Relaci√≥n 2: Participaci√≥n vs. Autoestima
        if 'Participaci√≥n_Clases_Num' in df.columns:
            print("\nRelaci√≥n 2: Participaci√≥n en Clase vs. Autoestima Acad√©mica")
            print("-" * 60)
            
            corr_2 = df['Participaci√≥n_Clases_Num'].corr(df['Autoestima_Acad√©mica'])
            corr_coef, p_value = pearsonr(df['Participaci√≥n_Clases_Num'], df['Autoestima_Acad√©mica'])
            print(f"Correlaci√≥n de Pearson: {corr_2:.4f}")
            print(f"P-valor: {p_value:.4f}")
            significancia_2 = "significativa" if p_value < 0.05 else "no significativa"
            print(f"La correlaci√≥n es {significancia_2}")
            
            plt.figure(figsize=(10, 6))
            plt.scatter(df['Participaci√≥n_Clases_Num'], df['Autoestima_Acad√©mica'], 
                       alpha=0.6, color=COLORES_CORHUILA['verde'], s=50)
            z = np.polyfit(df['Participaci√≥n_Clases_Num'], df['Autoestima_Acad√©mica'], 1)
            p = np.poly1d(z)
            plt.plot(df['Participaci√≥n_Clases_Num'], p(df['Participaci√≥n_Clases_Num']), 
                     color=COLORES_CORHUILA['azul'], linewidth=3)
            plt.title('Bloque 4: Relaci√≥n - Participaci√≥n en Clase vs. Autoestima Acad√©mica', 
                      fontweight='bold', color=COLORES_CORHUILA['azul'], pad=15)
            plt.xlabel('Participaci√≥n en Clase (1=Nunca, 5=Siempre)')
            plt.ylabel('Autoestima Acad√©mica')
            plt.grid(alpha=0.3)
            plt.text(0.05, 0.95, f'r = {corr_2:.3f}\np = {p_value:.3f}', 
                     transform=plt.gca().transAxes, fontsize=12, 
                     bbox=dict(boxstyle="round,pad=0.3", facecolor="white", alpha=0.8))
            plt.tight_layout()
            guardar_imagen("dispersion_participacion_vs_autoestima", 4)
            plt.close()

        # Relaci√≥n 3: Acceso a Recursos vs. Satisfacci√≥n Docentes
        if 'Acceso_Recursos_Acad√©micos_Num' in df.columns and 'Satisfacci√≥n_Docentes' in df.columns:
            print("\nRelaci√≥n 3: Acceso a Recursos vs. Satisfacci√≥n con Docentes")
            print("-" * 60)
            
            corr_3 = df['Acceso_Recursos_Acad√©micos_Num'].corr(df['Satisfacci√≥n_Docentes'])
            corr_coef_3, p_value_3 = pearsonr(df['Acceso_Recursos_Acad√©micos_Num'], df['Satisfacci√≥n_Docentes'])
            print(f"Correlaci√≥n de Pearson: {corr_3:.4f}")
            print(f"P-valor: {p_value_3:.4f}")
            significancia_3 = "significativa" if p_value_3 < 0.05 else "no significativa"
            print(f"La correlaci√≥n es {significancia_3}")
            
            plt.figure(figsize=(10, 6))
            plt.scatter(df['Acceso_Recursos_Acad√©micos_Num'], df['Satisfacci√≥n_Docentes'], 
                       alpha=0.6, color=COLORES_CORHUILA['azul'], s=50)
            z = np.polyfit(df['Acceso_Recursos_Acad√©micos_Num'], df['Satisfacci√≥n_Docentes'], 1)
            p = np.poly1d(z)
            plt.plot(df['Acceso_Recursos_Acad√©micos_Num'], p(df['Acceso_Recursos_Acad√©micos_Num']), 
                     color=COLORES_CORHUILA['verde'], linewidth=3)
            plt.title('Bloque 4: Relaci√≥n - Acceso a Recursos vs. Satisfacci√≥n con Docentes', 
                      fontweight='bold', color=COLORES_CORHUILA['azul'], pad=15)
            plt.xlabel('Acceso a Recursos Acad√©micos (1=Deficiente, 5=Excelente)')
            plt.ylabel('Satisfacci√≥n con Docentes')
            plt.grid(alpha=0.3)
            plt.text(0.05, 0.95, f'r = {corr_3:.3f}\np = {p_value_3:.3f}', 
                     transform=plt.gca().transAxes, fontsize=12, 
                     bbox=dict(boxstyle="round,pad=0.3", facecolor="white", alpha=0.8))
            plt.tight_layout()
            guardar_imagen("dispersion_recursos_vs_satisfaccion", 4)
            plt.close()

        print("\n" + "="*80)
        print("‚úÖ AN√ÅLISIS EDA COMPLETADO EXITOSAMENTE")
        print("‚úÖ 13 im√°genes generadas en output_images/")
        print("="*80)
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error ejecutando an√°lisis: {e}")
        return False

def generate_markdown_report():
    """Generar informe en Markdown"""
    print("üìù Generando informe Markdown...")
    
    markdown_content = """# Informe de An√°lisis Exploratorio de Datos Educativos

**Actividad de Aprendizaje 4**  
Corporaci√≥n Universitaria del Huila - CORHUILA  
Programa de Especializaci√≥n  

---

## Introducci√≥n

El presente informe documenta los resultados del An√°lisis Exploratorio de Datos (EDA) aplicado a un conjunto de datos educativos correspondiente a 200 estudiantes de posgrado. El objetivo principal consisti√≥ en explorar, visualizar y analizar variables acad√©micas y sociodemogr√°ficas para extraer conclusiones significativas que contribuyan a la mejora de los procesos educativos institucionales.

El an√°lisis se fundament√≥ en t√©cnicas estad√≠sticas descriptivas, pruebas de normalidad, an√°lisis bivariado y visualizaciones especializadas, empleando un enfoque metodol√≥gico riguroso que garantiza la confiabilidad de los hallazgos presentados.

---

## 1. Resumen de Datos (Estad√≠sticos Descriptivos)

### Caracter√≠sticas Generales del Dataset

El conjunto de datos analizado presenta una estructura robusta y consistente, compuesto por 200 observaciones correspondientes a estudiantes de posgrado y 28 variables que abarcan aspectos acad√©micos, demogr√°ficos y socioculturales. La integridad de los datos result√≥ √≥ptima, sin presencia de valores nulos, lo que garantiza la validez estad√≠stica de los an√°lisis realizados.

![Estad√≠sticos Generales](output_images/1_estadisticos_generales.png)
*Figura 1. Medias de las variables principales del estudio*

Las variables principales analizadas incluyen: Promedio Acad√©mico, Motivaci√≥n para el Estudio, Horas de Estudio Semanal y Autoestima Acad√©mica. Los estad√≠sticos descriptivos revelan patrones caracter√≠sticos de una poblaci√≥n estudiantil de posgrado con rendimientos acad√©micos generalmente satisfactorios.

### An√°lisis de Variables Principales

Las cuatro variables centrales del estudio presentaron comportamientos estad√≠sticos diferenciados que revelan aspectos importantes del perfil acad√©mico de los estudiantes. El Promedio Acad√©mico mostr√≥ una media de 3.52 puntos, con una mediana de 3.53 y una desviaci√≥n est√°ndar de 0.48, indicando una distribuci√≥n relativamente concentrada en valores superiores al promedio institucional.

La variable Motivaci√≥n para el Estudio registr√≥ una media de 5.06 en una escala de 10 puntos, con una alta variabilidad expresada en una desviaci√≥n est√°ndar de 2.80, sugiriendo heterogeneidad en los niveles motivacionales de la poblaci√≥n estudiantil.

Las Horas de Estudio Semanal presentaron una media de 15.97 horas, con valores que oscilan entre un m√≠nimo problem√°tico de -5.90 y un m√°ximo de 30.70 horas semanales. La presencia de valores negativos requiere atenci√≥n especial.

La Autoestima Acad√©mica evidenci√≥ una media de 5.63 puntos en escala decimal, con una distribuci√≥n que sugiere niveles moderados de autopercepci√≥n acad√©mica entre los estudiantes evaluados.

### Detecci√≥n y An√°lisis de Valores At√≠picos

![Detecci√≥n de Outliers](output_images/1_outliers_detectados.png)
*Figura 2. Cantidad de valores at√≠picos detectados por variable*

El an√°lisis de valores at√≠picos mediante el m√©todo del Rango Intercuart√≠lico (IQR) revel√≥ patrones significativos en la distribuci√≥n de los datos. La variable Promedio Acad√©mico present√≥ cuatro valores at√≠picos, mientras que Horas de Estudio Semanal mostr√≥ un valor at√≠pico problem√°tico (-5.9 horas).

---

## 2. Visualizaci√≥n de Datos

### Distribuciones de Frecuencia

![Histograma Promedio Acad√©mico](output_images/2_histograma_promedio.png)
*Figura 3. Distribuci√≥n de frecuencias del promedio acad√©mico*

![Histograma Horas de Estudio](output_images/2_histograma_horas_estudio.png)
*Figura 4. Distribuci√≥n de horas de estudio semanal*

### An√°lisis de Distribuciones Mediante Diagramas de Caja

![Boxplot Motivaci√≥n](output_images/2_boxplot_motivacion.png)
*Figura 5. Diagrama de caja para la motivaci√≥n de estudio*

![Boxplot Autoestima](output_images/2_boxplot_autoestima.png)
*Figura 6. Diagrama de caja para la autoestima acad√©mica*

### An√°lisis Categ√≥rico

![Distribuci√≥n por G√©nero](output_images/2_barras_genero.png)
*Figura 7. Distribuci√≥n de estudiantes por g√©nero*

![Estilos de Aprendizaje](output_images/2_donut_estilos_aprendizaje.png)
*Figura 8. Distribuci√≥n de estilos de aprendizaje*

---

## 3. Distribuciones y Tendencias

### An√°lisis de Normalidad

![Prueba de Normalidad](output_images/3_normalidad_test.png)
*Figura 9. Resultados de la prueba de normalidad Shapiro-Wilk*

El an√°lisis de normalidad revel√≥ que √∫nicamente las Horas de Estudio Semanal siguen distribuci√≥n normal (p=0.199), mientras que las dem√°s variables presentan desviaciones significativas de la normalidad.

![An√°lisis de Sesgo y Curtosis](output_images/3_sesgo_curtosis.png)
*Figura 10. An√°lisis de sesgo y curtosis de las variables principales*

---

## 4. An√°lisis Bivariado y Multivariado

### Relaci√≥n entre Horas de Estudio y Promedio Acad√©mico

![Dispersi√≥n Estudio vs Promedio](output_images/4_dispersion_estudio_vs_promedio.png)
*Figura 11. Relaci√≥n entre horas de estudio semanal y promedio acad√©mico*

La correlaci√≥n entre horas de estudio y promedio acad√©mico result√≥ pr√°cticamente inexistente (r=0.0003, p>0.05), sugiriendo que la cantidad de tiempo no determina directamente el rendimiento.

### Relaci√≥n entre Participaci√≥n en Clase y Autoestima Acad√©mica

![Dispersi√≥n Participaci√≥n vs Autoestima](output_images/4_dispersion_participacion_vs_autoestima.png)
*Figura 12. Relaci√≥n entre participaci√≥n en clase y autoestima acad√©mica*

Se observa una correlaci√≥n positiva tras la correcci√≥n del mapeo de variables categ√≥ricas.

### Relaci√≥n entre Acceso a Recursos y Satisfacci√≥n con Docentes

![Dispersi√≥n Recursos vs Satisfacci√≥n](output_images/4_dispersion_recursos_vs_satisfaccion.png)
*Figura 13. Relaci√≥n entre acceso a recursos acad√©micos y satisfacci√≥n con docentes*

Existe una correlaci√≥n positiva entre acceso a recursos y satisfacci√≥n docente tras la correcci√≥n metodol√≥gica.

---

## Conclusiones y Recomendaciones

### Hallazgos Principales

El an√°lisis revel√≥ un perfil estudiantil con rendimiento acad√©mico satisfactorio pero heterog√©neo en aspectos motivacionales. La ausencia de correlaci√≥n entre horas de estudio y rendimiento sugiere la importancia de la calidad sobre la cantidad del estudio.

### Recomendaciones Institucionales

1. **Diversificaci√≥n metodol√≥gica**: Implementar estrategias pedag√≥gicas que atiendan los diferentes estilos de aprendizaje identificados.

2. **Optimizaci√≥n del estudio**: Desarrollar programas de t√©cnicas de estudio eficientes priorizando calidad sobre cantidad.

3. **Fortalecimiento de recursos**: Mejorar el acceso a recursos acad√©micos para incrementar la satisfacci√≥n estudiantil.

### Correcciones Metodol√≥gicas Implementadas

Durante la evaluaci√≥n cr√≠tica se corrigieron:
- Mapeo de variables categ√≥ricas para incluir todos los valores del dataset
- Incorporaci√≥n de an√°lisis de significancia estad√≠stica
- Mejora de visualizaciones con indicadores de correlaci√≥n

---

**Corporaci√≥n Universitaria del Huila - CORHUILA**  
*Informe elaborado mediante t√©cnicas de an√°lisis descriptivo exploratorio (EDA)*"""

    try:
        with open('informe_eda_automatico.md', 'w', encoding='utf-8') as f:
            f.write(markdown_content)
        print("‚úÖ Informe Markdown generado: informe_eda_automatico.md")
        return True
    except Exception as e:
        print(f"‚ùå Error generando Markdown: {e}")
        return False

def generate_docx_report():
    """Generar informe en DOCX"""
    print("üìÑ Generando informe DOCX...")
    
    try:
        from docx import Document
        from docx.shared import Inches
        from docx.enum.text import WD_ALIGN_PARAGRAPH
        
        # Leer el contenido markdown
        with open('informe_eda_automatico.md', 'r', encoding='utf-8') as f:
            md_content = f.read()
        
        # Crear documento DOCX
        doc = Document()
        
        # Configurar estilos
        title_style = doc.styles['Title']
        heading1_style = doc.styles['Heading 1']
        heading2_style = doc.styles['Heading 2']
        
        # Procesar l√≠nea por l√≠nea
        lines = md_content.split('\n')
        for line in lines:
            line = line.strip()
            
            if line.startswith('# '):
                # T√≠tulo principal
                p = doc.add_paragraph(line[2:], style=title_style)
                p.alignment = WD_ALIGN_PARAGRAPH.CENTER
            elif line.startswith('## '):
                # Encabezado nivel 1
                doc.add_paragraph(line[3:], style=heading1_style)
            elif line.startswith('### '):
                # Encabezado nivel 2
                doc.add_paragraph(line[4:], style=heading2_style)
            elif line.startswith('!['):
                # Imagen
                try:
                    parts = line.split('](')
                    if len(parts) == 2:
                        img_desc = parts[0][2:]
                        img_path = parts[1].rstrip(')')
                        if os.path.exists(img_path):
                            p = doc.add_paragraph()
                            run = p.runs[0] if p.runs else p.add_run()
                            try:
                                run.add_picture(img_path, width=Inches(5))
                                p.alignment = WD_ALIGN_PARAGRAPH.CENTER
                            except:
                                doc.add_paragraph(f"[Imagen: {img_desc}]")
                except:
                    pass
            elif line.startswith('*') and not line.startswith('**'):
                # Descripci√≥n de figura
                p = doc.add_paragraph(line[1:])
                p.alignment = WD_ALIGN_PARAGRAPH.CENTER
                for run in p.runs:
                    run.italic = True
            elif line.startswith('**') and line.endswith('**'):
                # Texto en negrita
                p = doc.add_paragraph()
                run = p.add_run(line[2:-2])
                run.bold = True
                p.alignment = WD_ALIGN_PARAGRAPH.CENTER
            elif line == '---':
                # Separador
                doc.add_paragraph()
            elif line and not line.startswith('*'):
                # Texto normal
                doc.add_paragraph(line)
        
        # Guardar documento
        doc.save('informe_eda_automatico.docx')
        print("‚úÖ Informe DOCX generado: informe_eda_automatico.docx")
        return True
        
    except Exception as e:
        print(f"‚ùå Error generando DOCX: {e}")
        return False

def show_final_results():
    """Mostrar resultados finales"""
    print("\n" + "=" * 80)
    print("üéâ GENERACI√ìN AUTOM√ÅTICA COMPLETADA")
    print("=" * 80)
    
    files_generated = []
    
    # Verificar archivos generados
    if os.path.exists('informe_eda_automatico.md'):
        size = os.path.getsize('informe_eda_automatico.md') / 1024
        files_generated.append(f"üìù informe_eda_automatico.md ({size:.1f} KB)")
    
    if os.path.exists('informe_eda_automatico.docx'):
        size = os.path.getsize('informe_eda_automatico.docx') / 1024
        files_generated.append(f"üìÑ informe_eda_automatico.docx ({size:.1f} KB)")
    
    # Verificar im√°genes
    if os.path.exists('output_images'):
        images = [f for f in os.listdir('output_images') if f.endswith('.png')]
        files_generated.append(f"üñºÔ∏è  {len(images)} im√°genes en output_images/")
    
    print("ARCHIVOS GENERADOS:")
    for file in files_generated:
        print(f"   ‚úÖ {file}")
    
    print("\nüìä RESUMEN DEL AN√ÅLISIS:")
    print("   ‚Ä¢ 200 estudiantes de posgrado analizados")
    print("   ‚Ä¢ 28 variables acad√©micas y demogr√°ficas")
    print("   ‚Ä¢ 13 visualizaciones generadas con colores CORHUILA")
    print("   ‚Ä¢ 4 bloques de an√°lisis completados")
    print("   ‚Ä¢ Correcciones metodol√≥gicas implementadas")
    print("   ‚Ä¢ An√°lisis de significancia estad√≠stica incluido")
    
    print("\nüéØ PR√ìXIMOS PASOS:")
    print("   1. Revisar el informe generado")
    print("   2. Validar las visualizaciones")
    print("   3. Implementar las recomendaciones institucionales")
    
    print("\n" + "=" * 80)

def main():
    """Funci√≥n principal"""
    start_time = time.time()
    
    print_banner()
    
    # Verificar dependencias
    check_dependencies()
    
    # Ejecutar an√°lisis EDA
    if not execute_eda_analysis():
        print("‚ùå Error en la ejecuci√≥n del an√°lisis EDA")
        return
    
    # Generar informes
    if not generate_markdown_report():
        print("‚ùå Error generando informe Markdown")
        return
    
    if not generate_docx_report():
        print("‚ùå Error generando informe DOCX")
        return
    
    # Mostrar resultados finales
    elapsed_time = time.time() - start_time
    print(f"\n‚è±Ô∏è  Tiempo total de ejecuci√≥n: {elapsed_time:.2f} segundos")
    
    show_final_results()

if __name__ == "__main__":
    main() 